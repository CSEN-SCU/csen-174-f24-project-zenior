// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Student   Student?
  Faculty   Faculty?
}

model Student {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  major      String
  minor      String?
  skills     StudentSkill[]
  projects   ProjectMember[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
}

model Faculty {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  department      String
  bio             String?
  researchInterests String[]
  expertiseAreas  String[]
  advisedProjects Project[] @relation("advisorId")
  coAdvisedProjects Project[] @relation("coAdvisorId")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
}

model Skill {
  id      String   @id @default(uuid())
  name    String   @unique
  students StudentSkill[]
}

model Project {
  id                 String   @id @default(uuid())
  title              String
  description        String
  academicYear       String
  department         String
  isInterdisciplinary Boolean @default(false)
  status             String   @default("pending")
  groupOpen          Boolean  @default(true)
  advisorId          String?
  coAdvisorId        String?
  advisor            Faculty? @relation("advisorId", fields: [advisorId], references: [id])
  coAdvisor          Faculty? @relation("coAdvisorId", fields: [coAdvisorId], references: [id])
  members            ProjectMember[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model AdvisorRequest {
  id        String   @id @default(uuid())
  status    String   @default("pending")
  student   Student  @relation(fields: [studentId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentId String
  projectId String
}

model GroupRequest {
  id        String   @id @default(uuid())
  status    String   @default("pending")
  type      String   @default("join") // join or invite
  student   Student  @relation(fields: [studentId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentId String
  projectId String
}

model ProjectMember {
  student   Student @relation(fields: [studentId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  studentId String
  projectId String

  @@id([studentId, projectId])
}

model StudentSkill {
  student   Student @relation(fields: [studentId], references: [id])
  skill     Skill   @relation(fields: [skillId], references: [id])

  studentId String
  skillId   String

  @@id([studentId, skillId])
}
